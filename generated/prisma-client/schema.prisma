generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updated        DateTime     @updatedAt
  name           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  status         Status?      @default(PENDING)
  earnrule       Earnrule[]   @relation(fields: [earnruleIds], references: [id])
  earnruleIds    String[]     @db.ObjectId
}

model Admin {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  created     DateTime     @default(now())
  updated     DateTime     @updatedAt
  name        String       @unique
  email       String       @unique
  profilePic  String?
  phone       String?
  permissions Permission[]
}

type Permission {
  feature           String
  show              Boolean
  permissionFeature PermissionFeature
}

model Organization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
  name      String   @unique
  Instagram String?
  Facebook  String?
  type      String
  status    Status   @default(PENDING)
  users     User[]
}

model Earnrule {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime          @default(now())
  updated            DateTime          @updatedAt
  name               String            @unique
  type               String
  period             Period            @default(ALL_TIME) //if custom, then add start and end date
  startDate          DateTime?
  endDate            DateTime?
  nextUpdateEarnrule DateTime?
  picture            String //url
  frequency          RightperFrequency
  setting            ResultSetting
  active             Boolean           @default(true)
  Community          Community[]       @relation(fields: [communityIds], references: [id])
  communityIds       String[]          @db.ObjectId
  Shops              Shop[]            @relation(fields: [shopIds], references: [id])
  shopIds            String[]          @db.ObjectId
  User               User[]            @relation(fields: [userId], references: [id])
  userId             String[]          @db.ObjectId
  userUseEarnrule    Json?
}

model Community {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updated     DateTime   @updatedAt
  thaiName    String     @unique
  englishName String     @unique
  founded     DateTime   @default(now())
  active      Boolean    @default(true)
  description String?
  owner       String
  shop        Shop[]
  earnrule    Earnrule[] @relation(fields: [earnruleIds], references: [id])
  earnruleIds String[]   @db.ObjectId
}

model Shop {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updated     DateTime   @updatedAt
  name        String     @unique
  community   Community  @relation(fields: [communityId], references: [id])
  communityId String     @db.ObjectId
  earnrule    Earnrule[] @relation(fields: [earnruleIds], references: [id])
  earnruleIds String[]   @db.ObjectId
}

type ResultSetting {
  resultType ResultType
  value      ValueperCoin
}

type ValueperCoin {
  amount Int @default(1) //FIXED Amount
  coin   Int
}

type RightperFrequency {
  right     Int
  frequency Frequency
}

enum ResultType {
  FIXED //fixed amount
  BUY_AMOUNT //increase by buy amount
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum Period {
  ALL_TIME
  CUSTOM
}

enum Status {
  ACTIVE
  PENDING
  REJECTED
}

enum PermissionFeature {
  VIEW
  EDIT
}
